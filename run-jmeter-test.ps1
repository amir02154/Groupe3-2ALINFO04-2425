# Script d'ex√©cution des tests JMeter avec rapports enrichis
Write-Host "üöÄ D√©marrage des tests de performance JMeter" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

# Configuration
$jmeterPath = "/opt/jmeter/bin/jmeter"
$testPlan = "jmeter/performance-test.jmx"
$resultsFile = "jmeter/results.jtl"
$reportDir = "jmeter/report"

# Nettoyage des anciens rapports
Write-Host "üßπ Nettoyage des anciens rapports..." -ForegroundColor Yellow
if (Test-Path $reportDir) { Remove-Item -Recurse -Force $reportDir }
if (Test-Path $resultsFile) { Remove-Item -Force $resultsFile }
New-Item -ItemType Directory -Path $reportDir -Force | Out-Null

# Ex√©cution du test JMeter
Write-Host "‚ö° Ex√©cution des tests de performance..." -ForegroundColor Yellow
Write-Host "   - Test Plan: $testPlan" -ForegroundColor Cyan
Write-Host "   - R√©sultats: $resultsFile" -ForegroundColor Cyan
Write-Host "   - Rapport: $reportDir" -ForegroundColor Cyan

try {
    & $jmeterPath -n -t $testPlan -l $resultsFile -e -o $reportDir
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "`n‚úÖ Tests termin√©s avec succ√®s!" -ForegroundColor Green
        
        # Affichage des statistiques
        if (Test-Path $resultsFile) {
            Write-Host "`nüìä Statistiques des r√©sultats:" -ForegroundColor Green
            $lines = Get-Content $resultsFile | Select-Object -Last 10
            foreach ($line in $lines) {
                Write-Host "   $line" -ForegroundColor White
            }
        }
        
        # V√©rification du rapport HTML
        if (Test-Path "$reportDir/index.html") {
            Write-Host "`nüìà Rapport HTML g√©n√©r√©: $reportDir/index.html" -ForegroundColor Green
            Write-Host "   Ouvrez ce fichier dans votre navigateur pour voir les dashboards" -ForegroundColor Cyan
        }
        
        # Statistiques rapides
        Write-Host "`nüìà M√©triques de performance:" -ForegroundColor Green
        if (Test-Path $resultsFile) {
            $totalRequests = (Get-Content $resultsFile | Measure-Object -Line).Lines
            $successRequests = (Get-Content $resultsFile | Select-String "200" | Measure-Object -Line).Lines
            $errorRequests = (Get-Content $resultsFile | Select-String "403|404|500" | Measure-Object -Line).Lines
            
            Write-Host "   - Total des requ√™tes: $totalRequests" -ForegroundColor White
            Write-Host "   - Requ√™tes r√©ussies: $successRequests" -ForegroundColor Green
            Write-Host "   - Requ√™tes en erreur: $errorRequests" -ForegroundColor Red
            
            if ($totalRequests -gt 0) {
                $successRate = [math]::Round(($successRequests / $totalRequests) * 100, 2)
                Write-Host "   - Taux de succ√®s: $successRate%" -ForegroundColor Cyan
            }
        }
    }
    else {
        Write-Host "`n‚ùå Erreur lors de l'ex√©cution des tests" -ForegroundColor Red
    }
}
catch {
    Write-Host "`n‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   V√©rifiez que JMeter est install√© et accessible" -ForegroundColor Yellow
}

Write-Host "`nüéØ Script termin√©!" -ForegroundColor Green 